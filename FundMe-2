//SPDX-License Identifier: MIT
pragma solidity >=0.6.6 <0.9.0;
// Get the latest ETH/USD price from chainlink price feed
import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";
import "@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol";

contract FundMe {
// Using mapping to Store Amount sending
  mapping(address => uint256) public addressToAmountFunded;


  address[] public funders;
	// safe math library check uint256 for integer overflows
    using SafeMathChainlink for uint256;
     address public owner;

     constructor() public{
         owner = msg.sender;
     }
  
    function fund() public payable {

        uint256 minimumUSD =25 *10 **18;
        require(getConversionRate(msg.value)>= minimumUSD, "Send More");
//msg.sender gives the address and msg.value give amount we sent
        addressToAmountFunded[msg.sender] += msg.value;
        funders.push(msg.sender);

        //Conversion Rate of ETH to USD How to get That 
        // Oracles Chainlinks will help
    }
///function to get the version of the chainlink pricefeed
    function getVersion() public view returns (uint256){
        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);
        return priceFeed.version();
    }
//Printing the Hello World
    function HelloWorld() public pure returns(string memory _name){
        _name="Hello World";
        return _name;
    }

    // getting the Latest Price Feeds of Etherium
    function getPrice() public view returns(uint256){
        AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);
        (,int256 answer,,,)= priceFeed.latestRoundData();
          return uint256(answer*100000000000);
    }
// get the Conversation Rate btw ETH/USD
    function getConversionRate(uint256 ethAmount) public view returns(uint256){

        uint256 ethPrice = getPrice();
        uint256 ethAmountInUSD =(ethPrice*ethAmount) /100000000000000000;
        return ethAmountInUSD;
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;

    }

    function withdraw() payable onlyOwner public{
        
        msg.sender.transfer(address(this).balance);
        for(uint256 funderIndex=0; funderIndex<funders.length; funderIndex++){
            address funder =funders[funderIndex];
            addressToAmountFunded[funder]=0;
        }
        funders = new address[](0);
    }

}
